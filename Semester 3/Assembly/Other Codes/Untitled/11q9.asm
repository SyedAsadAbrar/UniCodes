[org 0x0100]
jmp start

temp: dw 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

oldisr: dd 0 ; space for saving old isr
copy: db 0
oldds: db 0

clrscr: 
	cmp byte[copy], 0
	jne exitfunc
	push es
	push ax
	push cx
	push di
	push ds
	push si
	
	mov si, 0
	mov ax, 0xb800
	mov es, ax
	mov cx, 2000
	mov di, temp
	l0:
		mov ax, word[es:si]
		mov word[ds:di], ax
		add si, 2
		add di, 2
		loop l0
		
	mov ax, 0xb800
	mov es, ax ; point es to video base
	xor di, di ; point di to top left column
	mov ax, 0x0720 ; space char in normal attribute
	mov cx, 2000 ; number of screen locations

	cld ; auto increment mode
	rep stosw ; clear the whole screen

	pop si
	pop ds
	pop di

	pop cx
	pop ax
	pop es
	
	exitfunc:
		ret

; keyboard interrupt service routine
kbisr: 
	push ax
	push es
	mov ax, 0xb800
	mov es, ax ; point es to video memory
	in al, 0x60 ; read a char from keyboard port
	cmp al, 0x2a ; has the left shift pressed
	jne nextcmp ; no, try next comparison
	je shiftpressed
	jmp exit ; leave interrupt routine
	
nextcmp: 
	cmp al, 0x36 ; has the right shift pressed
	jne nextcmp2 ; no, try next comparison
	je shiftpressed
	jmp exit ; leave interrupt routine
	
shiftpressed:
			call clrscr
			mov byte[copy], 1
			jmp exit
	
nextcmp2: 
	cmp al, 0xaa ; has the left shift released
	jne nextcmp3 ; no, try next comparison
	mov cx, 2000
	mov ax, 0xb800
	mov es, ax
	mov si, temp
	mov di, 0
	l7:
		mov ax, word[ds:si]
		mov word[es:di], ax
		add si, 2
		add di, 2
		loop l7
	jmp exit ; leave interrupt routine
	
nextcmp3: 
	cmp al, 0xb6 ; has the right shift released
	jne nomatch ; no, chain to old ISR
	mov cx, 2000
	mov ax, 0xb800
	mov es, ax
	mov si, temp
	mov di, 0
	l8:
		mov ax, word[ds:si]
		mov word[es:di], ax
		add si, 2
		add di, 2
		loop l8
	jmp exit ; leave interrupt routine

nomatch: 
	pop es
	pop ax
	jmp far [cs:oldisr] ; call the original ISR
	
exit: 
	mov al, 0x20
	out 0x20, al ; send EOI to PIC
	pop es
	pop ax
	iret ; return from interrupt
	
start: 
	mov byte[copy], 0
	xor ax, ax
	mov es, ax ; point es to IVT base
	mov ax, [es:9*4]
	mov [oldisr], ax ; save offset of old routine
	mov ax, [es:9*4+2]
	mov [oldisr+2], ax ; save segment of old routine
	cli ; disable interrupts
	mov word [es:9*4], kbisr ; store offset at n*4
	mov [es:9*4+2], cs ; store segment at n*4+2
	sti ; enable interrupts

	mov dx, start ; end of resident portion
	add dx, 15 ; round up to next para
	mov cl, 4
	shr dx, cl ; number of paras
	mov ax, 0x3100 ; terminate and stay resident
	int 0x21